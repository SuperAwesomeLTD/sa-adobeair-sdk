{
    "name": "Adobe Flash SDK",
    "text": "<p>The SuperAwesome AdobeAIR SDK (Software Development Kit) lets you to easily add COPPA-compliant pre-roll and display advertisements to your apps.</p>\n<p>This full project source is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-adobeair-sdk/tree/v3_beta\">https://github.com/SuperAwesomeLTD/sa-adobeair-sdk/tree/v3_beta</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your Flash application.</p>\n"
                },
                {
                    "name": "Integrating the SDK",
                    "text": "<h3 id=\"download-the-necessary-files\">Download the necessary files</h3>\n<p>The new Adobe AIR SDK (v3 Beta) is compiled into a .swc file that you can download from here <a href=\"https://github.com/SuperAwesomeLTD/sa-adobeair-sdk/blob/v3_beta/bin/SuperAwesome_AIR_v3Beta.swc?raw=true\">SuperAwesome_AIR_v3Beta.swc</a>.\nThis will allow you to add Banner, Interstitial and Video Ads to your project.</p>\n<p>Once you&#39;ve downloaded this file, you need to add it to your project.</p>\n<h3 id=\"setup-the-adobe-flash-builder-environment\">Setup the Adobe Flash Builder Environment</h3>\n<p>Create a new Action Script Mobile Project (Adobe AIR) in Adobe Flash Builder (or use your existing one). This can be situated anywhere on your hard drive, such as:</p>\n<ul>\n<li>C:/Workspace/MyAIRProject/</li>\n<li>/Users/myuser/Workspace/MyAIRProject/</li>\n</ul>\n<p>We&#39;ll refer to this location from now on simply as <code>/project_root</code>. There should be two important files in this folder:</p>\n<ul>\n<li><code>MyAIRProject.as</code> - or a similary named file, that acts as the main class of the application.</li>\n<li><code>MyAIRProject-app.xml</code>\nas well as other files needed by Flash Builder.</li>\n</ul>\n<p><img src=\"img/project_source.png\" alt=\"\" title=\"Project setup\"></p>\n<h3 id=\"adding-the-sdk\">Adding the SDK</h3>\n<p>In Flash Builder, right-click on your project and select <code>Properties</code>. In the window that appears, select <code>ActionScript Build Path</code> and then the <code>Library path</code> tab. \nOnce there, click on the <code>Add SWC</code> button and browse to where you downloaded the <code>SuperAwesome_AIR_v3Beta.swc</code> file and click OK.</p>\n<p>It&#39;s a good idea to save the .swc file somewhere save, maybe inside a <code>libs</code> subfolder in <code>/project_root</code>. </p>\n<p><img src=\"img/project_withlib.png\" alt=\"\" title=\"Project with library reference\"></p>\n"
                }
            ]
        },
        {
            "name": "Initial Setup",
            "text": "<p>To begin using the SDK, you need to change some parts of your <code>MyAIRProject.as</code> file, in order to import the tv.superawesome. package and setup some global variables:</p>\n<pre><code>package  {\n    // imports needed files for AIR\n    import flash.display.Sprite;\n    import flash.display.StageAlign;\n    import flash.display.StageScaleMode;\n\n    // import all classes from the SuperAwesome package\n    import tv.superawesome.*;\n\n    // main class - always extends from MovieClip\n    public class MyAIRProject extends Sprite {\n\n\n        public function MyAIRProject() {\n\n            super();\n\n            // support autoOrients\n            stage.align = StageAlign.TOP_LEFT;\n            stage.scaleMode = StageScaleMode.NO_SCALE;\n\n            // Configures SuperAwesome SDK to production mode\n            SuperAwesome.getInstance().setConfigProduction();\n\n            // enables or disabled test mode\n            SuperAwesome.getInstance().enableTestMode();\n        }\n    }\n\n}\n</code></pre><p>The SuperAwesome SDK can be setup in three ways: Production, Staging and Development, by using:</p>\n<pre><code>SuperAwesome.getInstance().setConfigProduction();\nSuperAwesome.getInstance().setConfigStaging();\nSuperAwesome.getInstance().setConfigDevelopment();\n</code></pre><p>And you can also enable or disable test mode globally, by using:</p>\n<pre><code>SuperAwesome.getInstance().enableTestMode();\nSuperAwesome.getInstance().disableTestMode();\n</code></pre>"
        },
        {
            "name": "Playing Ads instantly",
            "sections": [
                {
                    "name": "Banner Ads",
                    "text": "<p>Once you&#39;ve setup everything, the easiest way to load ads is by loading them instantly.\nFor example, if you want to display a Banner Ad in your application:</p>\n<pre><code>var vp:Rectangle = new Rectangle(0,0,320,50);\nvar ad:SABannerAd = new SABannerAd(vp, 5687);\naddChild(ad);\nad.playInstant();\n</code></pre><p>You first create a rectangle that should be the size of the Ad you specified in the dashboard. Then create a new <code>BannerAd</code> object, using the rectangle and a PlacementId. \nSince we enabled test mode in the previous section, it is alright to use <code>5687</code> as a PlacementId, but you should use the one obtained in the Dashboard for real ads.</p>\n<p>Finally, to be able to see the Ad, we need to add it as a child of the scene and call <code>playInstant()</code> to send a signal to the SDK to load and present the ad.</p>\n"
                },
                {
                    "name": "Interstitial Ads",
                    "text": "<p>Creating interstitial ads is similar.</p>\n<p>Just add the following lines of code to your <code>MyAIRProject()</code> function:</p>\n<pre><code>var iad:SAInterstitialAd = new SAInterstitialAd(5692);\naddChild(iad);\niad.playInstant();\n</code></pre><p>Notice that an Interstitial Ad does not need specifying a rectanlge, since it automatically covers the whole screen, as a popup. Again, since test mode is enabled, we can use the <code>5692</code> test placement, but it&#39;s advised to use the one received got from the Dashboard.</p>\n<p>Finally, to be able to see the Ad, we need to add it as a child of the scene and call <code>playInstant()</code> to send a signal to the SDK to load and present the ad.</p>\n"
                },
                {
                    "name": "Video Ads",
                    "text": "<p>Next, to add a Video Ad change the <code>MyAIRProject()</code> function in <code>MyAIRProject.as</code> to contain the following code:</p>\n<pre><code>var vp2: Rectangle = new Rectangle(0,60,400,300);\nvar vad: SAVideoAd = new SAVideoAd(vp2, 5740);\naddChild(vad);\nvad.playInstant();\n</code></pre><p>What this does is define a new Rectangle and then create a new <code>VideoAd</code> object using the rectangle and a test <code>5740</code> PlacementId.</p>\n<p>The video ad will only play once the <code>playInstant()</code> function is called. </p>\n"
                }
            ]
        },
        {
            "name": "Preloading Ads",
            "text": "<p>The Super Awesome SDK supports preloading of ads. This means that you can load most of the Ad data beforehand and display the ad when it&#39;s convenient.</p>\n<p>To be able to preload ads though, you will need to do some setup.</p>\n<h3 id=\"implementing-the-sa-loader-protocol\">Implementing the SA Loader Protocol</h3>\n<p>The first step is to declare our <code>Main</code> class as implementing the <code>SALoaderProtocol</code>, which is a custom SuperAwesome interface:</p>\n<pre><code>public class Main extends MovieClip implements SALoaderProtocol {\n    .....\n}\n</code></pre><p>The <code>SALoaderProtocol</code> defines two functions that any class must implement. Therefore, add the following code inside Main&#39;s definition:</p>\n<pre><code>public function didPreloadAd(ad: SAAd, placementId:int): void {\n    // empty implementation for now\n}\n\npublic function didFailToPreloadAdForPlacementId(placementId: int): void {\n    // empty implementation for now\n}\n</code></pre><h3 id=\"preloading-ads\">Preloading ads</h3>\n<p>Once that is done, in our <code>Main</code> class&#39; constructor you should add code to preload ads:</p>\n<pre><code>public function Main() {\n    ...\n\n    // this code calls the SALoader singleton to preload data for one Ad placement \n    SALoader.getInstance().preloadAd(5687);\n\n    // here we&#39;re declaring Main as a delegate for SALoader, meaning it will\n    // implement SALoader&#39;s SALoaderProtocol functions (the one we defined earlier)\n    SALoader.getInstance().delegate = self;\n\n    // declare a banner ad, but don&#39;t play it just yet\n    // also don&#39;t specify a placement_id, it&#39;s an optional parameter when preloading\n    // ads, and will be overwriten later \n    var r1: Rectangle = new Rectangle(0, 0, 320, 50);\n    bannerad = new SABannerAd(r1);\n\n}\n</code></pre><p>Finally, we will use the two functions we just implemented, part of SALoaderProtocol, to see when an ad\nhas been loaded and act on it.</p>\n<pre><code>public function didPreloadAd(ad: SAAd, placementId:int): void {\n    // check to see if the right placement was loaded\n    if (placementId == 5687) {    \n        // use the special setAd() function of each SuperAwesome Ad object to assign the\n        // loaded Ad\n        bannerad.setAd(ad);\n\n        // use the playPreloader() function to display the ad; This function assumes\n        // that bannerad has a valid add assigned\n        bannerad.playPreloaded();\n\n        // and add the banner ad as a child to the current scene\n        addChild(bannerad);\n    }\n}\n</code></pre><p>These steps apply equally to Interstitial and Video Ads.</p>\n"
        },
        {
            "name": "Ad Lifecycle Events",
            "sections": [
                {
                    "name": "Common Events",
                    "text": "<p>Using the same delegate pattern all ads can serve additional events than can be caught and acted upon.</p>\n<p>To do this, your <code>MyAIRProject</code> class must also implement the <code>SAViewProtocol</code> interface:</p>\n<pre><code>public class MyAIRProject extends Sprite implements SALoaderProtocol, SAViewProtocol {\n    ...\n}\n</code></pre><p>Then, of course, you need to implement all the functions related to this interface:</p>\n<pre><code>\n// this function will be called when a certain Ad has been shown on the screen\npublic function adWasShown(placementId: int): void {\n\n}\n\n// this function will be called when a certain Ad has, for some reason,\n// failed to show\npublic function adFailedToShow(placementId: int): void {\n\n}\n\n// this function will be called when an Interstitial or Fullscreen Video Ad\n// has been close\npublic function adWasClosed(placementId: int): void {\n\n}\n\n// this function will be called when a user clicks or taps on an Ad and \n// follows the Ads associated URL\npublic function adFollowedURL(placementId: int): void {\n\n}\n</code></pre><p>Finally, to complete the code, all ads must assign their <code>delegate</code> object to <code>MyAIRProject</code>. This means that when an ad launches an adWasShown or adWasClosed event, Main will respond with the functions implemented above.</p>\n<pre><code>var bannerad: SABannerAd = new SABannerAD(new Rectangle(0, 0, 320, 50), 5687);\nbannerad.delegate = this; // where this is MyAIRProject\n</code></pre>"
                },
                {
                    "name": "Video Events",
                    "text": "<p>Additionally, if your <code>MyAIRProject</code> class implements functions from the <code>SAVideoProtocol</code>, you can catch events like video start or end.</p>\n<p>As usual, you need to change your <code>MyAIRProject</code> class:</p>\n<pre><code>public class MyAIRProject extends Sprite implements SALoaderProtocol, SAViewProtocol, SAVideoAdProtocol {\n\n    // triggered when a video has started playing\n    public function videoStarted(placementId: int): void {\n\n    }\n\n    // triggered when a video has ended playing\n    public function videoEnded(placementId:int): void {\n\n    }\n}\n</code></pre><p>And just as before, any Video Ads in your app must set their <code>videoDelegate</code> object to <code>MyAIRProject</code>, as class that implements the SAVideoAdProtocol interface.</p>\n<pre><code>var videoAd: SAVideoAd = new SAVideoAd(new Rectangle(0, 0, 480, 320), 5740);\nvideoAd.videoDelegate = this; // where this is MyAIRProject\nvideoAd.playInstant();\naddChild(videoAd);\n</code></pre>"
                }
            ]
        },
        {
            "name": "Testing  Placements",
            "text": "<p>Our SDK has a test mode flag that if set, causes your placements to display our demo ads. This way you can easily test the production and the development version of your app separately. To enable test mode call the following method:</p>\n<pre><code>SuperAwesome.sharedInstance().enableTestMode();\n</code></pre><p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Debug vs. Production",
            "text": "<h3 id=\"debug\">Debug</h3>\n<p>Debugging with Flash AIR will involve using their simulator, which performs OK for most tasks.</p>\n<h3 id=\"deployment\">Deployment</h3>\n<p>Deployment on both iOS and Android platforms involves some careful measure regarding each type of platform.\nRemember that both system support multiple resolutions. Super Awesome SDK is built to handle all these resolutions, with some limitations:</p>\n<ul>\n<li>Banner ads will scale their content so that the ad will always maintain aspect ration</li>\n<li>Interstitials will always try to cover the whole screen and maintain the Ads aspect ration</li>\n<li>Videos will not maintain aspect ratio</li>\n</ul>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}